#! /usr/bin/env node
const process = require('process');
const shuttle = require('../dist/shuttle.cjs.js');
const argv = require('minimist')(process.argv.slice(2), {
    boolean: true,
});
const fs = require('fs');
const path = require('path');
const pkg = require('../package.json');

const helpText = `
 -h
--help 帮助内容
 -f
--file 配置文件路径
 -s
--src  源文件路径
 -d
--dst 写入文件路径
 -p
--parser 解析器 'jsVue' | 'tsClassVue'
 -g
--generator 生成器 'jsVue' | 'tsClassVue'
--generator-plugin 生成器插件 addImportStore addParamsTypeAnnotation
--parser-generator jsStore | jsRouter
`;

const cfgTpl = `
[
    {
        "src": "/path/to/src", // 可以是文件/文件夹
        "dst": "/path/to/dst" // 可以是文件/文件夹
        "parser": "jsVue",
        "generator": "tsClassVue",
        "generatorPlugin": {
            "addImportStore": true,
            "addParamsTypeAnnotation": true
        },
    },
    {
        "src": "/path/to/src", // 可以是文件/文件夹
        "dst": "/path/to/dst" // 可以是文件/文件夹
        "parserGenerator": "jsStore"
    }
];
`;

if (argv.v || argv.version) {
    console.log(pkg.version);
    return;
}

// help
if (argv.h || argv.help) {
    console.log(helpText);
    return;
}

// config template
if (argv['cfg-tpl']) {
    return;
}

const cfg = argv.f || argv.file;
const src = argv.s || argv.src;
const dst = argv.d || argv.dst;
const parser = argv.p || argv.parser;
const generator = argv.g || argv.generator;
const parserPlugins = argv['parser-plugin'] || [];
const generatorPlugins = argv['generator-plugin'] || [];
const parserGenerator = argv['parser-generator'];

/**
 * 处理parser和generator
 * @param parserName
 * @param generatorName 
 * @param src 
 * @param dst 
 */
async function handle(parserName, generatorName, src, dst, parserPlugins, generatorPlugins) {
    // 生成parser
    let parser = null;
    switch (parserName) {
    case 'jsVue': parser = new shuttle.JSVueParser.default(); break;
    case 'tsClassVue': parser = new shuttle.TSClassVueParser.default(); break;
    }

    // 生成generator
    let generator = null;
    switch (generatorName) {
    case 'jsVue': generator = new shuttle.JSVueGenerator.default(); break;
    case 'tsClassVue': generator = new shuttle.TSClassVueGenerator.default(); break;
    }

    for (const pluginName of generatorPlugins || []) {
        const plugin = shuttle.genPlugin[pluginName];
        if (plugin) {
            generator.addPlugin(plugin);
        }
    }

    // 解析
    const parseResult = await parser.handleFile(src);
    // 生成
    generator.handleFile(parseResult, dst);
}

/**
 * 处理paserGenerator
 * @param parserGeneratorName
 * @param src 
 * @param dst 
 */
async function handleParserGenerator(parserGeneratorName, src, dst) {
    let parserGen = null;
    switch (parserGeneratorName) {
    case 'jsStore': parserGen = new shuttle.JSStoreParserGenerator.default(); break;
    case 'jsRouter': parserGen = new shuttle.JSRouterParserGenerator.default(); break;
    }

    parserGen.handle(src, dst);
}

/**
 * 处理config中的内容
 * @param cfg 配置路径
 */
function handleCfg(cfg) {
    const configOptions = JSON.parse(fs.readFileSync(cfg).toString('utf-8'));
    if (!Array.isArray(configOptions)) {
        configOptions = [ configOptions ];
    }

    for (const opt of configOptions) {
        const {
            parser,
            generator,
            parserPlugins,
            generatorPlugins,
            parserGenerator,
            src,
            dst,
        } = opt;

        if (parserGenerator) {
            handleParserGenerator(parserGenerator, src, dst);
        } else if (parser, generator) {
            handle(parser, generator, src, dst, parserPlugins || [], generatorPlugins || []);
        }
    }
}

if (cfg) {
    handleCfg(cfg);
} else if (parser && generator && src && dst) {
    handle(parser, generator, src, dst, parserPlugins, generatorPlugins);
} else if (parserGenerator) {
    handleParserGenerator(parserGenerator, src, dst);
} else if (fs.existsSync(path.join(__dirname, '../shuttle.config.json'))) {
    handleCfg(path.join(__dirname, '../shuttle.config.json'));
}
